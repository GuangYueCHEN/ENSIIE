C <- class.ind(cl=cluster)
#矩阵做法
M <- matrix(data = 0, nrow = 3, ncol = 4)
cluster <-iris$Species
C <- class.ind(cl=cluster)
as.matrix(X) -> X
solve((t(C)%*%C))%*%t(C)%*%X
#循环算法
M <- matrix(0, ncol(C), ncol(X))
for(i in 1:nrow(X)) {
M[which.max(C[i,]),] <- M[which.max(C[i,]),] + X[i,]
}
M <- t(t(M) / colSums(C))
M
library(nnet)
rm(list=ls())
data(iris)
X <- iris[, 1 : 4]
library("nnet")
data(iris)
X <- iris[, 1 : 4]
rm(list = ls())
library(MASS)
data(crabs)
C <- class.ind(cl=crabs$sp)
plot(crabs)
pairs(crabs)
pairs(crabs, col = c("blue", "orange")[crabs$sp],pch = c(20, 21)[crabs$sex])
#c("a", "b")[c(1, 1, 2, 1)] = aaba
crabsquant = crabs[,4:8]
pairs(crabsquant, col = c("blue", "orange")[crabs$sp],pch = c(20, 21)[crabs$sex])
C <- class.ind(cl=crabs$sp)
plot(crabs)
pairs(crabs)
pairs(crabs, col = c("blue", "orange")[crabs$sp],pch = c(20, 21)[crabs$sex])
#c("a", "b")[c(1, 1, 2, 1)] = aaba
crabsquant = crabs[,4:8]
pairs(crabsquant, col = c("blue", "orange")[crabs$sp],pch = c(20, 21)[crabs$sex])
kmeans(crabsquant, 4) -> res
res$cluster
paste(crabs$sp, crabs$sex, "-") -> True_Class
True_Class
str(res)
res$tot.withinss
table(True_Class,res$cluster)
pairs(crabsquant, col = c("blue", "orange","red","black")[res$cluster],pch = c(20, 21)[crabs$sex])
kmeans(crabsquant, 4) -> res
res$cluster
paste(crabs$sp, "-", crabs$sex) -> True_Class
True_Class
str(res)
res$tot.withinss
table(True_Class,res$cluster)
pairs(crabsquant, col = c("blue", "orange","red","black")[res$cluster],pch = c(20, 21)[crabs$sex])
help(kmeans)
crabsquant2<-crabsquant[,-3]/crabsquant$CL #pour enlever l'effet de la taille
kmeans(crabsquant2, 4) -> res
res$cluster
paste(crabs$sp, crabs$sex, "-") -> True_Class
table(True_Class,res$cluster)
pairs(crabsquant, col = c("blue", "orange","red","black")[res$cluster],pch = c(20, 21)[crabs$sex])
hist(mapply(function(x){kmeans(crabsquant, 4, nstart = 1)$tot.withinss},1:1000))
hist(mapply(function(x){kmeans(crabsquant2, 4, nstart = 1)$tot.withinss},1:1000))
kmeans(crabsquant2, 4, nstart = 30)->res.kmeans2
table(True_Class, res.kmeans2$cluster)
z<-kde2d(crabsquant2[,2],crabsquant2[,4])
contour(z)
points(crabsquant2[,c(2,4)],col=c("blue","orange")[crabs$sp],pch=c(20,21)[crabs$sex])
points(res.kmeans2$centers[,c(2,4)],cex=2,pch=21,bg="red")
plot(mapply(function(x){kmeans(crabsquant2,x,nstart = 20)$tot.withinss},1:20))
plot(mapply(function(x){kmeans(crabsquant2,x,nstart = 20)$tot.withinss},1:20))
z<-kde2d(crabsquant2[,2],crabsquant2[,4])
contour(z)
points(crabsquant2[,c(2,4)],col=c("blue","orange")[crabs$sp],pch=c(20,21)[crabs$sex])
points(res.kmeans2$centers[,c(2,4)],cex=2,pch=21,bg="red")
z<-kde2d(crabsquant2[,2],crabsquant2[,4])
contour(z)
points(crabsquant2[,c(2,4)],col=c("blue","orange")[crabs$sp],pch=c(20,21)[crabs$sex])
z<-kde2d(crabsquant2[,2],crabsquant2[,4])
contour(z)
points(crabsquant2[,c(2,4)],col=c("blue","orange")[crabs$sp],pch=c(20,21)[crabs$sex])
points(res.kmeans2$centers[,c(2,4)],cex=2,pch=21,bg="red")
z<-kde2d(crabsquant2[,2],crabsquant2[,4])
contour(z)
#划分线
nks<-rmultinom(1,1000,prob=c(1/3,2/3))
means<-c(0,4)
sds<-c(1,1/2)
samples<-mapply(function(nk,mean,sd){rnorm(nk,mean,sd)},nks,means,sds)
hist(x<-unlist(samples))
curve(dnorm(x,mean=4,sd=1/2),-2,7,col="orange")
curve(dnorm(x,mean=0,sd=1),-2,7,add=TRUE,col="red")
mixture<-function(x){
1/3*dnorm(x,mean=0,sd=1)+
2/3*dnorm(x,mean=4,sd=1/2)
}
curve(mixture(x), -2, 7, col="blue", add=TRUE)
#res$z  #matrice of tik
res$parameters
res$classification #the classification
plot(res,"BIC")
res.means<-kmeans(x, 2, nstart = 10)
list.of.cluster<-split(data.frame(x), res.means$cluster)
res.means
library(mclust)
Mclust(x)->res
summary(res)
#summary(Mclust(x,modelNames = 'E'))#????????????bic
#summary(Mclust(x,modelNames = 'V'))#????????????bic
Mclust(x, 2, modelNames = "V") -> res.2V
Mclust(x, 2, modelNames = "E") -> res.2E
data(faithful)
plot(faithful)
res_Mclust<-Mclust(faithful)
summary(res_Mclust)
#res$z  #matrice of tik
res$parameters
res$classification #the classification
plot(res,"classification")
plot(res,"uncertainty")
plot(res,"density")
out.dist=dist(faithful,method="euclidean")
res_hclust<-hclust(out.dist, method = "complete")
summary(res_hclust)
plot(res)
knitr::opts_chunk$set(echo = TRUE)
dim(spam)
library(kernlab)
library(FactoMineR)
library(tidyverse)
data(spam)
dim(spam)
train <- sample(1:dim(spam)[1],400)
kpc <- kpca(~.,data = spam[train,-58],kernel="rbfdot",kpar=list(sigma=0.001),features=2)
kpcv <- pcv(kpc)
plot(rotated(kpc),col=as.integer(spam[train,58]),xlab="1st Principal comp.", ylab="2nd Principal Comp.")
kpc <- kpca(~.,data = spam[train,-58],kernel="polydot",kpar=list(degree=2),features=2)
kpcv <- pcv(kpc)
plot(rotated(kpc),col=as.integer(spam[train,58]),xlab="1st Principal comp.", ylab="2nd Principal Comp.")
library(mlbench)
set.seed(111)
obj <- mlbench.spirals(100,1,0.025)
my.data <- data.frame(4*obj$x)
names(my.data) <- c("X1","X2")
#plot(my.data)
#plot(my.data,col=c("orange","bleu")[obj$classes])
#my.data<-as.matrix(my.data)
plot(my.data,col=c("orange","blue")[obj$classes])
plot(my.data,col=c("orange","blue")[kmeans(my.data,2)$cluster],main="Kmeans")
sigma2<-1#zi ji xuan de, xiang yi ge fa zhi yi yang, xiang dang yu jue ding liang dian zhi jian de ju li
K<-exp(-as.matrix(dist(my.data))^2/sigma2)
#sum(K>0.1)
#8. Perform spectral clustering using kernlab function specc
specc(as.matrix(K),,centers=2)->cluster
plot(my.data,col=cluster)
sample(size = c, x = 1:n)
sample(size = 2, x = 1:5)
sample(size = 2, x = 1:5)
sample(size = 2, x = 1:5)
sample(size = 2, x = 1:5)
sample(size = 2, x = 1:5)
sample(size = 2, x = 1:5)
sample(size = 2, x = 1:5)
sample(size = 2, x = 1:5)
sample(size = 2, x = 1:5)
knitr::opts_chunk$set(echo = TRUE)
EM<-function(data,k){
X<-as.matrix(data)
p<-ncol(X)
n<-nrow(X)
pi<-vector(length=k)
mu<-matrix(rnorm(k*p)*10,ncol=k,nrow=p)
Sigma<-diag(p)
for(i in 1:(k-1)){
Sigma=cbind(Sigma,diag(p)*(i+1))
}
for(i in 1:k){
pi[i]=1/k
}
T<-matrix(0,ncol=k,nrow=n)
Q<-2
Q.new<-1
max_iteration<-10
for(i in 1:max_iteration){
Q=Q.new
Eres<-Estep(X,pi=pi,mu=mu,sigma=Sigma,K=k)
T<-Eres$T
Q.new<-Eres$Q
print(Q.new)
Mres<-Mstep(X,T,pi=pi,mu=mu,sigma=Sigma,K=k)
mu<-Mres$mu
pi<-Mres$pi
Sigma<-Mres$Sigma
res<-vector(length=n)
for(i in 1:n){
un<-c(0,0,0)
for(j in 1:k){
un[j]<-mvpnorm(X[i,], mu = mu[,j],Sigma = Sigma[,j*p-p+1:p])
}
res[i]=which.max(un)
}
return(res)
}
EM(iris[,1:4],3)
knitr::opts_chunk$set(echo = TRUE)
data("iris")
iris<-iris[,1:4]
res<-kmeans(iris,3)
res$cluster
knitr::opts_chunk$set(echo = TRUE)
data("iris")
iris<-iris[,1:4]
res<-kmeans(iris,3)
res$cluster
knitr::opts_chunk$set(echo = TRUE)
mvpnorm<-function(x,mu,Sigma){
x<-t(x)
mu<-t(mu)
p<-nrow(x)
return( as.numeric(exp(-1/2*((x-mu)%*%solve(Sigma)%*%t((x-mu))))/det(Sigma)^(1/2)/(2*pi)^(p/2)))
}
mvpnorm(matrix(0,ncol=1,nrow=2), mu = matrix(0,ncol=1,nrow=2),Sigma = matrix(c(1,0,0,1),2,2))
knitr::opts_chunk$set(echo = TRUE)
Estep<-function(X,pi,mu,sigma,K){
n<-nrow(X)
p<-ncol(X)
T<-matrix(0,ncol=K,nrow=n)
for(i in 1:n){
sum<-0
for(l in 1:K){
sum=sum+pi[l]*mvpnorm(X[i,], mu = mu[,l],Sigma = sigma[,l*p-p+1:p])
}
for(k in 1:K){
T[i,k]=pi[k]*mvpnorm(X[i,], mu = mu[,k],Sigma = sigma[,k*p-p+1:p])/sum
}
}
Q<-0
for(i in 1:n){
for(k in 1:K){
Q=Q+T[i,k]*log(pi[k]*mvpnorm(X[i,], mu = mu[,k],Sigma = sigma[,k*p-p+1:p]))
}
}
result <- list(T=T, Q=Q)
return(result)
}
knitr::opts_chunk$set(echo = TRUE)
Mstep<-function(X,T,pi,mu,sigma,K){
p<-nrow(mu)
n<-nrow(T)
for(j in 1:K){
sum<-0
for(i in 1:n){
sum=sum+T[i,j]
}
pi[j]=sum/n
sum1<-vector(length=ncol(X))
for(i in 1:n){
sum1=sum1+T[i,j]*X[i,]
}
mu[,j]=t(sum1)/sum
sum2<-matrix(0,p,p)
for(i in 1:n){
sum2=sum2+T[i,j]*(t(X[i,]-t(mu[,j]))%*%(X[i,]-t(mu[,j])))
}
for(i in 1: p){
sigma[,j*p-p+i]=sum2[,i]/sum
}
}
result <- list(pi=pi, mu=mu,Sigma=sigma)
return(result)
}
knitr::opts_chunk$set(echo = TRUE)
EM<-function(data,k){
X<-as.matrix(data)
p<-ncol(X)
n<-nrow(X)
pi<-vector(length=k)
mu<-matrix(rnorm(k*p)*10,ncol=k,nrow=p)
Sigma<-diag(p)
for(i in 1:(k-1)){
Sigma=cbind(Sigma,diag(p)*(i+1))
}
for(i in 1:k){
pi[i]=1/k
}
T<-matrix(0,ncol=k,nrow=n)
Q<-2
Q.new<-1
max_iteration<-10
for(i in 1:max_iteration){
Q=Q.new
Eres<-Estep(X,pi=pi,mu=mu,sigma=Sigma,K=k)
T<-Eres$T
Q.new<-Eres$Q
print(Q.new)
Mres<-Mstep(X,T,pi=pi,mu=mu,sigma=Sigma,K=k)
mu<-Mres$mu
pi<-Mres$pi
Sigma<-Mres$Sigma
res<-vector(length=n)
for(i in 1:n){
un<-c(0,0,0)
for(j in 1:k){
un[j]<-mvpnorm(X[i,], mu = mu[,j],Sigma = Sigma[,j*p-p+1:p])
}
res[i]=which.max(un)
}
return(res)
}
EM(iris[,1:4],3)
knitr::opts_chunk$set(echo = TRUE)
EM<-function(data,k){
X<-as.matrix(data)
p<-ncol(X)
n<-nrow(X)
pi<-vector(length=k)
mu<-matrix(rnorm(k*p)*10,ncol=k,nrow=p)
Sigma<-diag(p)
for(i in 1:(k-1)){
Sigma=cbind(Sigma,diag(p)*(i+1))
}
for(i in 1:k){
pi[i]=1/k
}
T<-matrix(0,ncol=k,nrow=n)
Q<-2
Q.new<-1
max_iteration<-10
for(i in 1:max_iteration){
Q=Q.new
Eres<-Estep(X,pi=pi,mu=mu,sigma=Sigma,K=k)
T<-Eres$T
Q.new<-Eres$Q
print(Q.new)
Mres<-Mstep(X,T,pi=pi,mu=mu,sigma=Sigma,K=k)
mu<-Mres$mu
pi<-Mres$pi
Sigma<-Mres$Sigma
}
res<-vector(length=n)
for(i in 1:n){
un<-c(0,0,0)
for(j in 1:k){
un[j]<-mvpnorm(X[i,], mu = mu[,j],Sigma = Sigma[,j*p-p+1:p])
}
res[i]=which.max(un)
}
return(res)
}
EM(iris[,1:4],3)
knitr::opts_chunk$set(echo = TRUE)
EM<-function(data,k){
X<-as.matrix(data)
p<-ncol(X)
n<-nrow(X)
pi<-vector(length=k)
mu<-matrix(rnorm(k*p)*10,ncol=k,nrow=p)
Sigma<-diag(p)
for(i in 1:(k-1)){
Sigma=cbind(Sigma,diag(p)*(i+1))
}
for(i in 1:k){
pi[i]=1/k
}
T<-matrix(0,ncol=k,nrow=n)
Q<-2
Q.new<-1
max_iteration<-10
for(i in 1:max_iteration){
Q=Q.new
Eres<-Estep(X,pi=pi,mu=mu,sigma=Sigma,K=k)
T<-Eres$T
Q.new<-Eres$Q
print(Q.new)
Mres<-Mstep(X,T,pi=pi,mu=mu,sigma=Sigma,K=k)
mu<-Mres$mu
pi<-Mres$pi
Sigma<-Mres$Sigma
}
res<-vector(length=n)
for(i in 1:n){
un<-c(0,0,0)
for(j in 1:k){
un[j]<-mvpnorm(X[i,], mu = mu[,j],Sigma = Sigma[,j*p-p+1:p])
}
res[i]=which.max(un)
}
return(res)
}
EM(iris[,1:4],3)
knitr::opts_chunk$set(echo = TRUE)
EM<-function(data,k){
X<-as.matrix(data)
p<-ncol(X)
n<-nrow(X)
pi<-vector(length=k)
mu<-matrix(rnorm(k*p)*10,ncol=k,nrow=p)
Sigma<-diag(p)
for(i in 1:(k-1)){
Sigma=cbind(Sigma,diag(p)*(i+1))
}
for(i in 1:k){
pi[i]=1/k
}
T<-matrix(0,ncol=k,nrow=n)
Q<-2
Q.new<-1
max_iteration<-5
for(i in 1:max_iteration){
Q=Q.new
Eres<-Estep(X,pi=pi,mu=mu,sigma=Sigma,K=k)
T<-Eres$T
Q.new<-Eres$Q
print(Q.new)
Mres<-Mstep(X,T,pi=pi,mu=mu,sigma=Sigma,K=k)
mu<-Mres$mu
pi<-Mres$pi
Sigma<-Mres$Sigma
}
res<-vector(length=n)
for(i in 1:n){
un<-c(0,0,0)
for(j in 1:k){
un[j]<-mvpnorm(X[i,], mu = mu[,j],Sigma = Sigma[,j*p-p+1:p])
}
res[i]=which.max(un)
}
return(res)
}
EM(iris[,1:4],3)
knitr::opts_chunk$set(echo = TRUE)
EM<-function(data,k){
X<-as.matrix(data)
p<-ncol(X)
n<-nrow(X)
pi<-vector(length=k)
mu<-matrix(rnorm(k*p)*10,ncol=k,nrow=p)
Sigma<-diag(p)
for(i in 1:(k-1)){
Sigma=cbind(Sigma,diag(p)*(i+1))
}
for(i in 1:k){
pi[i]=1/k
}
T<-matrix(0,ncol=k,nrow=n)
Q<-2
Q.new<-1
max_iteration<-5
for(i in 1:max_iteration){
Q=Q.new
Eres<-Estep(X,pi=pi,mu=mu,sigma=Sigma,K=k)
T<-Eres$T
Q.new<-Eres$Q
print(Q.new)
Mres<-Mstep(X,T,pi=pi,mu=mu,sigma=Sigma,K=k)
mu<-Mres$mu
pi<-Mres$pi
Sigma<-Mres$Sigma
print(Sigma)
}
res<-vector(length=n)
for(i in 1:n){
un<-c(0,0,0)
for(j in 1:k){
un[j]<-mvpnorm(X[i,], mu = mu[,j],Sigma = Sigma[,j*p-p+1:p])
}
res[i]=which.max(un)
}
return(res)
}
EM(iris[,1:4],3)
knitr::opts_chunk$set(echo = TRUE)
EM<-function(data,k){
X<-as.matrix(data)
p<-ncol(X)
n<-nrow(X)
pi<-vector(length=k)
mu<-matrix(rnorm(k*p)*10,ncol=k,nrow=p)
Sigma<-diag(p)
for(i in 1:(k-1)){
Sigma=cbind(Sigma,diag(p)*(i+1))
}
for(i in 1:k){
pi[i]=1/k
}
T<-matrix(0,ncol=k,nrow=n)
Q<-2
Q.new<-1
max_iteration<-5
for(i in 1:max_iteration){
Q=Q.new
Eres<-Estep(X,pi=pi,mu=mu,sigma=Sigma,K=k)
T<-Eres$T
Q.new<-Eres$Q
print(Q.new)
Mres<-Mstep(X,T,pi=pi,mu=mu,sigma=Sigma,K=k)
mu<-Mres$mu
pi<-Mres$pi
Sigma<-Mres$Sigma
print(Sigma)
}
res<-vector(length=n)
for(i in 1:n){
un<-c(0,0,0)
for(j in 1:k){
un[j]<-mvpnorm(X[i,], mu = mu[,j],Sigma = Sigma[,j*p-p+1:p])
}
res[i]=which.max(un)
}
return(res)
}
EM(iris[,1:4],3)
